<project name="ZX Build System" default="dist">
	
<!-- zX build script -->
	
<!-- ========== External Dependencies ===================================== -->
	<!-- Just drop in jar file here to be added to the classpath -->
	<property name="lib.home" value="${basedir}/../zXCore/lib"/>
	<property name="pdflib.home" value="${lib.home}/pdf/"/>
	<property name="deploy.home" value="${basedir}/../zXWeb/src/webapp/WEB-INF/lib/"/>
		
<!-- ========== Component Declarations ==================================== -->
	
	<!-- The name of this component -->
	<property name="component.name"          value="zXMisc"/>
	
	<!-- The primary package name of this component -->
	<property name="component.package"       value="org.zxframework"/>
	
	<!-- The title of this component -->
	<property name="component.title"         value="zX Misc (Java)"/>
	
	<!-- The current version number of this component -->
	<property name="component.version"       value="j1.5"/>
	
	<!-- The base directory for compilation targets -->
	<property name="build.home"              value="${basedir}/target"/>
	
	<!-- The base directory for component configuration files -->
	<property name="conf.home"               value="src/conf"/>
	
	<!-- The base directory for distribution targets -->
	<property name="dist.home"               value="dist"/>
	
	<!-- The base directory for component sources -->
	<property name="source.home" 			value="src/java"/>
	<property name="testsource.home" 		value="src/test"/>
	
	<!-- The base directory for unit test sources -->
	<property name="test.home"				value="src/test"/>
	
<!-- ========== Compiler Defaults ========================================= -->
	
	<!-- Should Java compilations set the 'debug' compiler option? -->
	<property name="compile.debug"           value="true"/>
	
	<!-- Should Java compilations set the 'deprecation' compiler option? -->
	<property name="compile.deprecation"     value="false"/>

	<!-- Should Java compilations set the 'optimize' compiler option? -->
	<property name="compile.optimize"        value="true"/>

	<!-- Construct compile classpath -->
	<path id="compile.classpath">
		<pathelement location="${build.home}/classes"/>
		<fileset dir="${lib.home}">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${lib.home}/openoffice">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${basedir}/../zXCore/target">
			<include name="*.jar"/>
		</fileset>
	</path>
	
	<!-- Construct PDF classpath -->
	<path id="doclet.classpath">
		<pathelement location="${build.home}/classes"/>
		<fileset dir="${pdflib.home}">
			<include name="*.jar"/>
		</fileset>
	</path>	
		
<!-- ========== Executable Targets ======================================== -->
	
	<target name="init" description="Initialize and evaluate conditionals">
		<echo message="-------- ${component.title} ${component.version} --------"/>
		<filter  token="name"		value="${component.name}"/>
		<filter  token="package"	value="${component.package}"/>
		<filter  token="version"	value="${component.version}"/>
	</target>
	
	<target name="prepare" depends="init" description="Prepare build directory">
		<mkdir dir="${build.home}"/>
		<mkdir dir="${build.home}/classes"/>
		<mkdir dir="${build.home}/conf"/>
		<mkdir dir="${build.home}/doc"/>
		<mkdir dir="${build.home}/doc/api"/>
		<mkdir dir="${build.home}/tests"/>
	</target>
	
	<target name="static" depends="prepare" description="Copy static files to build directory">
		<tstamp/>
		<!-- Include other config stuff here like in web.xml and db properties -->
		<copy  todir="${build.home}/conf" filtering="on">
			<fileset dir="${conf.home}" includes="*.MF"/>
			<fileset dir="${conf.home}" includes="*.properties"/>
		</copy>
	</target>
	
	<target name="compile" depends="static,compile-only" description="Compile shareable components"/>
	
	<target name="clean" description="Clean build and distribution directories">
		<delete failonerror="false" dir="${build.home}"/>
		<delete failonerror="false" dir="${dist.home}"/>
		<delete failonerror="false" dir="${basedir}/work"/>
	</target>
	
	<target name="all" depends="clean,compile" description="Clean and compile all components"/>
	
	<!-- Look into using Marven or Xdoclet -->
	<target name="javadoc" depends="compile" description="Create component Javadoc documentation">
		<mkdir	dir="${dist.home}"/>
		<mkdir	dir="${dist.home}/doc"/>
		<mkdir	dir="${dist.home}/doc/api"/>
		
		<!-- Copy the images -->
		<!-- 
		<copy todir="${dist.home}/doc/api/doc-files/" overwrite="true">
			<fileset  dir="${source.home}/doc-files/" />
		</copy>
		-->
		
		<javadoc sourcepath="${source.home}"
				destdir="${dist.home}/doc/api"
				overview="${source.home}/overview.html"
				packagenames="org.zxframework.*"
				author="true"
				private="true"
				version="true" verbose="off"
				doctitle="&lt;h1&gt;${component.title} (Version ${component.version})&lt;/h1&gt;"
				windowtitle="${component.title} (Version ${component.version})"
				bottom="Copyright (c) 2002-2004 - CPA">
				<classpath refid="compile.classpath"/>
		</javadoc>
	</target>
	
	<target name="deploy" depends="compile" description="Copy the compiled jar into the webapp dir">
		<mkdir	dir="${deploy.home}"/>
		<copy	file="${build.home}/${component.name}.jar" tofile="${deploy.home}/${component.name}.jar" />
	</target>
		
	<target name="dist" depends="compile,javadoc" description="Create binary distribution">
		<mkdir	dir="${dist.home}"/>
		
		<!--
		// Add in this to the packaging as well :
		<copy      file="LICENSE.txt" todir="${dist.home}"/>
		<copy      file="RELEASE-NOTES.txt" todir="${dist.home}"/> 
		// Add in this to the packaging as well :
		-->
		
		<copy	file="${build.home}/${component.name}.jar" tofile="${dist.home}/${component.name}.jar" />
		<mkdir	dir="${dist.home}/src"/>
		<copy	todir="${dist.home}/src" filtering="on">
	    	<fileset  dir="${source.home}"/>
    	</copy>
	</target>
	
	<target name="compile-only" depends="init" >
		
		<javac srcdir="${source.home};${testsource.home}"
           destdir="${build.home}/classes"
           debug="${compile.debug}"
           deprecation="${compile.deprecation}"
           optimize="${compile.optimize}">
			<classpath refid="compile.classpath"/>
		</javac>
		
		<copy  todir="${build.home}/classes" filtering="on">
			<fileset dir="${source.home}" excludes="**/*.java"/>
			<fileset dir="${testsource.home}" excludes="**/*.java"/>
		</copy>
		
		<mkdir dir="${build.home}/classes/META-INF"/>
		
		<!-- 		
		 Need to do a license file
		<copy file="LICENSE.txt" todir="${build.home}/classes/META-INF"/>
		--> 
		<jar jarfile="${build.home}/${component.name}.jar"
			basedir="${build.home}/classes"
			manifest="${build.home}/conf/MANIFEST.MF">
			<include name="org/zxframework/**" />
			<include name="META-INF/LICENSE.txt"/>
		</jar>
		
	</target>
	
	<target name="javadoc-pdf" depends="compile" description="Create component Javadoc documentation in PDF">
		<javadoc sourcepath="${source.home}"
				overview="${source.home}/overview.html"
				packagenames="org.zxframework.*"
				author="true" 
				private="false" verbose="off"
				version="true"> 
				<classpath refid="compile.classpath"/>
				<doclet name="com.tarsec.javadoc.pdfdoclet.PDFDoclet" 
					path="${pdflib.home}/pdfdoclet.jar:${pdflib.home}/itext.jar:${pdflib.home}/Tidy.jar:${pdflib.home}/jakarta-oro.jar">
					<param name="-pdf" value="${basedir}/doc/zXMisc.pdf"/>
					<param name="-config" value="${basedir}/config.properties"/>
					</doclet>
		</javadoc>
	</target>    
	
	<target name="junit" depends="compile" description="Unit test the application">
		<junit printsummary="yes" fork="no">
			
			<classpath refid="compile.classpath"/>
			<classpath>
				<pathelement location="${source.home}"/>
				<pathelement location="${testsource.home}"/>
				<pathelement path="${build.home}/classes"/>
			</classpath>
			
			<batchtest>
				<fileset dir="${build.home}/classes">
				    <include name="org/zxframework/**/*Test*"/>
				    <exclude name="**/*TestSuite*"/>
				    <exclude name="**/*PerformanceTest*"/>
				</fileset>
			</batchtest>
			
		</junit>
	</target>

</project>