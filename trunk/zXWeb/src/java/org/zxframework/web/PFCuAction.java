package org.zxframework.web;

import org.zxframework.LabelCollection;
import org.zxframework.ZXObject;
import org.zxframework.zXType;
import org.zxframework.expression.ExpressionParseException;
import org.zxframework.property.Property;
import org.zxframework.util.StringUtil;
import org.zxframework.util.ToStringBuilder;

/**
 * Create-Update action.
 * 
 * These can be used to have validations that are not BO driven but are implemented for a specific edit form.
 * 
 * <pre>
 * 
 * Change    : BD23FEB06 - V1.5:94
 * Why       : Show all error messages generated by actions that fired
 * </pre>
 * 
 * @author Michael Brewer
 * @author Bertus Dispa
 * @author David Swann
 * 
 * @version 0.0.1
 */
public class PFCuAction extends ZXObject {
	
    //------------------------ Members
	
    private String name;
    private String comment;
    private String active;
    private LabelCollection msg;
    private zXType.rc RC;
    private String focusattr;
    private String action;
    
    //------------------------ Constructor

    /**
     * Default constructor.
     */
    public PFCuAction() {
        super();
    }
    
    //------------------------ Getters/Setters

	/**
	 * Expression (script) that is executed when the rule fires.
	 * Can for example be used to set some attributes or so
	 * 
	 * @return Returns the action.
	 */
	public String getAction() {
		return action;
	}

	/**
	 * @param action The action to set.
	 */
	public void setAction(String action) {
		this.action = action;
	}

	/**
	 * The active expression. An expression which evaluates which to execute this create update action.
	 * Expression indicating wheter action 'fires' or not.
	 * Optional. The default behaviour is true.
	 * 
	 * @return Returns the active.
	 */
	public String getActive() {
		return active;
	}

	/**
	 * @param active The active to set.
	 */
	public void setActive(String active) {
		this.active = active;
	}

	/**
	 * The developers comment for this create update action.
	 * 
	 * @return Returns the comment.
	 */
	public String getComment() {
		return comment;
	}

	/**
	 * @param comment The comment to set.
	 */
	public void setComment(String comment) {
		this.comment = comment;
	}

	/**
	 * The business object attribute to focus on.
	 * 
	 * @return Returns the focusattr.
	 */
	public String getFocusattr() {
		return focusattr;
	}

	/**
	 * @param focusattr The focusattr to set.
	 */
	public void setFocusattr(String focusattr) {
		this.focusattr = focusattr;
	}

	/**
	 * Collection of messages when rule fires.
	 * 
	 * @return Returns the msg.
	 */
	public LabelCollection getMsg() {
		return msg;
	}

	/**
	 * @param msg The msg to set.
	 */
	public void setMsg(LabelCollection msg) {
		this.msg = msg;
	}

	/**
	 * @return Returns the name.
	 */
	public String getName() {
		return name;
	}

	/**
	 * @param name The name to set.
	 */
	public void setName(String name) {
		this.name = name;
	}
	
	/**
	 * Return code when message fires.
	 * 
	 * @return Returns the rc.
	 */
	public zXType.rc getRC() {
		return RC;
	}

	/**
	 * @param rc The rc to set.
	 */
	public void setRC(zXType.rc rc) {
		this.RC = rc;
	}
	
	//------------------------ Digester Util methods
	
	/**
	 * @param rc The rc to set.
	 */
	public void setRc(String rc) {
		this.RC = zXType.rc.getEnum(rc);
	}
	
	//------------------------ Public methods
	
    /**
     * Process CreateUpdate action.
     * 
     * @param pobjPageflow A handle to the current pageflow
     * @return Returns the success code of proccess
     */
    public zXType.rc process(Pageflow pobjPageflow) {
        zXType.rc process = zXType.rc.rcOK;
        
        /**
         * Check whether active (always active when no active expression given).
         * NOTE : We default to true if there is no active expression.
         */
        boolean blnActive = true;
        if (StringUtil.len(getActive()) > 0) {
        	try {
            	Property objProperty = getZx().getExpressionHandler().eval(getActive());
            	if (objProperty == null) {
            		throw new ExpressionParseException("Failed to return property");
            	}
            	
            	blnActive = objProperty.booleanValue();
            	
        	} catch (ExpressionParseException e) {
        		getZx().trace.addError("Unable to evaluate active expression", 
						   			   "CUAction: " + getName() + ", expression: " + getActive(), e);
        		process = zXType.rc.rcError;
        		return process;
        	}
        	
        }
        
        if (blnActive) {
        	/**
        	 * Set message
        	 */
        	if (getMsg() != null && getMsg().size() > 0) {
        		String strMsg = pobjPageflow.resolveLabel(getMsg());
        		int intRC = getRC().pos;
        		if (intRC == zXType.rc.rcOK.pos) {
                    if (StringUtil.len(pobjPageflow.getInfoMsg()) > 0) pobjPageflow.setInfoMsg(pobjPageflow.getInfoMsg() + "\n");
                    pobjPageflow.setInfoMsg(pobjPageflow.getInfoMsg() + strMsg);
                    
        		} else if (intRC == zXType.rc.rcWarning.pos ||  intRC == zXType.rc.rcError.pos) {
                    if (StringUtil.len(pobjPageflow.getErrorMsg()) > 0) pobjPageflow.setErrorMsg(pobjPageflow.getErrorMsg() + "\n");
                    pobjPageflow.setErrorMsg(pobjPageflow.getErrorMsg() + strMsg);
                    
        		} // Rc
        		
        	} // Messages?
        	
        	/**
        	 * Set focus attribute but never overwrite if already set
        	 */
        	if (StringUtil.len(getFocusattr()) > 0 
        		&& StringUtil.len(pobjPageflow.getForceFocusAttr()) == 0) {
        		pobjPageflow.setForceFocusAttr(getFocusattr());
        	}
        	
        	/**
        	 * Apply action
        	 */
        	if (StringUtil.len(getAction()) > 0) {
            	try {
                	Property objProperty = getZx().getExpressionHandler().eval(getAction());
                	if (objProperty == null) {
                		throw new ExpressionParseException("Failed to return property");
                	}
                	
            	} catch (ExpressionParseException e) {
            		getZx().trace.addError("Unable to evaluate action expression", 
    						   			   "CUAction: " + getName() + ", expression: " + getAction(), e);
            		process = zXType.rc.rcError;
            		return process;
            	}
        	}
        	
        	/**
        	 * Set rc
        	 */
        	process = getRC();
        	
        } // Active?
        
        return process;
    }
	
    //------------------------ Overidden methods
    
    /**
     * @see java.lang.Object#clone()
     */
	public Object clone() {
		PFCuAction objPFCuAction = new PFCuAction();
		
		objPFCuAction.setAction(getAction());
		objPFCuAction.setActive(getActive());
		objPFCuAction.setComment(getComment());
		objPFCuAction.setFocusattr(getFocusattr());
		
		if (getMsg() != null) {
			objPFCuAction.setMsg((LabelCollection)getMsg().clone());
		}
		
		objPFCuAction.setName(getName());
		objPFCuAction.setRC(getRC());
		
		return objPFCuAction;
	}
    
    /**
     * @see java.lang.Object#toString()
     */
    public String toString() {
		ToStringBuilder toString = new ToStringBuilder(this);
        
        toString.append("name", getName());
        toString.append("active", getActive());
        toString.append("action", getAction());
        toString.append("focusattr", getFocusattr());
        
        toString.append("rc", zXType.valueOf(getRC()));
        if (getMsg() != null) {
        	toString.append("msg", getMsg().getLabel());
        }
        
        toString.append("comment", getComment());
        
        return toString.toString();
    }
}